build_test:
  image: node:lts-alpine
  stage: test
  before_script:
    - cp app/etc/env.production.js app/etc/env.js
    - cp app/etc/modules.production.json app/etc/modules.config.json
  script:
    - npm install
    - npm run compile
    - npm run build

demo_deploy:
  image: alpine
  stage: deploy
  only:
    - demo
  before_script:
    - 'which ssh-agent || ( apk add --update openssh )'
    - eval $(ssh-agent -s)
    - echo "$DEMO_KEY" | base64 -d | ssh-add -
    - mkdir ~/.ssh
    - ssh-keyscan -H $DEMO_HOST >> ~/.ssh/known_hosts
  script:
    - ssh $DEMO_USER@$DEMO_HOST 'cd cattr/demo && docker-compose build --no-cache --force-rm demo'
    - ssh $DEMO_USER@$DEMO_HOST 'cd cattr/demo && docker-compose down -v && docker-compose up -d demo'

live_deploy:
  image: alpine
  stage: deploy
  only:
    - release
  before_script:
    - 'which ssh-agent || ( apk add --update openssh )'
    - eval $(ssh-agent -s)
    - echo "$CI_KEY" | base64 -d | ssh-add -
    - mkdir ~/.ssh
    - ssh-keyscan -H $CI_HOST >> ~/.ssh/known_hosts
  script:
    - ssh $CI_USER@$CI_HOST 'cd cattr/core-vue-application && git pull'
    - ssh $CI_USER@$CI_HOST 'source .zshrc && cd cattr/core-vue-application && npm install'
    - ssh $CI_USER@$CI_HOST 'source .zshrc && cd cattr/core-vue-application && npm run compile'
    - ssh $CI_USER@$CI_HOST 'source .zshrc && cd cattr/core-vue-application && npm run build'
    - ssh $CI_USER@$CI_HOST 'test -f cattr/core-vue-application/dist/index.html || exit 1'
    - ssh $CI_USER@$CI_HOST 'cd cattr/core-vue-application && git clean -Xf output/*'
    - ssh $CI_USER@$CI_HOST 'cp -rf cattr/core-vue-application/dist/* cattr/core-vue-application/output'
    - ssh $CI_USER@$CI_HOST 'cd cattr/core-vue-application && git clean -Xf dist'
    - ssh $CI_USER@$CI_HOST 'cd cattr/core-vue-application && sentry-cli releases deploys `cat package.json | grep version | grep -o ":.*" | grep -o "\".*\"" | sed "s/\"//g"` new -e "production"'

staging_deploy:
  image: alpine
  stage: deploy
  only:
    - staging
  before_script:
    - 'which ssh-agent || ( apk add --update openssh )'
    - eval $(ssh-agent -s)
    - echo "$STAGING_KEY" | base64 -d | ssh-add -
    - mkdir ~/.ssh
    - ssh-keyscan -H $STAGING_HOST >> ~/.ssh/known_hosts
  script:
    - ssh $STAGING_USER@$STAGING_HOST 'cd frontend && git pull'
    - ssh $STAGING_USER@$STAGING_HOST 'cp -f frontend/app/etc/env.staging.js frontend/app/etc/env.js'
    - ssh $STAGING_USER@$STAGING_HOST 'cp -f frontend/app/etc/modules.staging.json frontend/app/etc/modules.config.json'
    - ssh $STAGING_USER@$STAGING_HOST 'source .zshrc && cd frontend && npm install'
    - ssh $STAGING_USER@$STAGING_HOST 'source .zshrc && cd frontend && npm run compile'
    - ssh $STAGING_USER@$STAGING_HOST 'source .zshrc && cd frontend && npm run build'
    - ssh $STAGING_USER@$STAGING_HOST 'test -f frontend/dist/index.html || exit 1'
    - ssh $STAGING_USER@$STAGING_HOST 'cd frontend && git clean -Xf output/*'
    - ssh $STAGING_USER@$STAGING_HOST 'cp -rf frontend/dist/* frontend/output'
    - ssh $STAGING_USER@$STAGING_HOST 'cd frontend && git clean -Xf dist'
    - ssh $STAGING_USER@$STAGING_HOST 'cd frontend && sentry-cli releases deploys `cat package.json | grep version | grep -o ":.*" | grep -o "\".*\"" | sed "s/\"//g"` new -e "staging"'
